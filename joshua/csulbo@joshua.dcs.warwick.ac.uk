require 'rubygems'
require 'tweetstream'
require 'mysql2'
require 'oauth'
require 'json'

def testprint
  puts "hello world"
end

def connect_to_sql

	begin #java equivelance is try (and catch)
		con = Mysql2::Client.new(host: 'mysql5.dcs.warwick.ac.uk', username: 'csulbo', password: '')

		#Try and find the database, if it doesn't exist, create it
		found = false
		databases = con.query("SHOW DATABASES")
		databases.each do |database|
			if database['Database']=="thirdyearproject"
				#if database exists, use it
				#Don't need to reapply the schema because want to keep all the data 
				#in there before starting
				con.query("USE thirdyearproject")
				found = true
				puts "Found the correct database"
			end
		end
		#if not found, create it 
		if found == false
			puts "Not found the database, Creating..."
			con.query("CREATE DATABASE thirdyearproject")
			con.query("USE thirdyearproject")
			make_tables(con)
		end
		
		authenticate(con)
		
		rescue Exception => e #catch
			raise e

		ensure #will run regardless of failures
			con.close if con
		end
	end

def make_tables(con)

	create_table_query = ""
	schema = File.new("schema.sql", "r")
	while (single_query = schema.gets)
   		create_table_query += "#{single_query}"
	end
	"#{create_table_query}".split(";").each { |query| con.query("#{query}")}
	schema.close
end

#This probably needs to be given the sql connection, and the Twitter connection?
def getMHRWnextnode(con)
  # Don't forget to do burn in! 
    # And set a burnInThreshold
    
  #starting point
   current_id = 72109014 #Starting with Katie
   #15439395 - stephenfry
   #72109014 - katie
   
   current_num_all = 0
   while (current_id != nil)
     puts "starting current_id = " + current_id.to_s
       #Check if in database
       found = userToDatabaseHandler(con, current_id)
       #were they in the database?
       num_rows = found.count
       if num_rows == 0
               #If NOT found user, get the users details
               begin
                  current = Twitter.user(current_id)
               rescue Twitter::Error::TooManyRequests
                      puts "rescuing TooManyRequests sleeping"
                      sleep(900)
                      retry
                 rescue
                     puts "generic error. Retrying with new user"
                     query = "select * from users;"
                     query_result = con.query(query)
                     new_current = getNeighbour(query_result)
                     current_id = new_current["id"]
                     retry
               end
               current_num_all = current["followers_count"] + current["friends_count"]
               #add user to users table in database
               query = "insert into users values(" + current_id.to_s + ", '" + current["screen_name"] + "', " + current["friends_count"].to_s + ", " + current["followers_count"].to_s + ", " + current["statuses_count"].to_s + ", 0, 0, 0, 0);"
               con.query(query)
               #get their initial 100 tweets
               tweetsHandler(con, current_id, 100)
        else
               #How many tweets to grab???? Why not 100? Need to justify
               tweetsHandler(con, current_id, 5)
               query = "select following_count, followed_by_count from users where user_ID = " + current_id.to_s + ";"
                          count = con.query(query)
                          count.each do |counter|
                            current_num_all = counter["following_count"] + counter["followed_by_count"] 
                          end
         end
         
         #grabs friends and followers into a databse. Updates cursors. 
         friendsAndFollowersHandler(con, current_id)
      
         #now need to find the next user to grab using MHRW
         #if cursor is null, get the first page 
         
         #MHRW
              # given the current node  
              # go to method to do with database and tweet collection
              # choose a random neighbour (need a method for that?)
              # get all neighbours of current node
              # get all neighbours of neighbour node
              # calculate ratio
              # make p a random number between 0 and 1
              # compare p and ratio
              # if p<=ratio
              #     current node = neighbour node
              # if p>ratio
              #   current node stays the same
         
         
         #Get all the users from the database to choose neighbour from
         query = "select * from following where user_id = " + current_id.to_s + " OR followed_by_id = " + current_id.to_s + ";"
         connections = con.query(query)
         
         new_current_id_flag = false
         kick_counter = 0
         while(new_current_id_flag == false)
             
             puts "finding neighbour"
             begin
                 chosen = getNeighbour(connections)
            
                 if chosen["user_ID"]==current_id #neighbour is followed_by_id
                    neighbour_ID = chosen["followed_by_id"] 
                 else #neighbour is user_ID
                    neighbour_ID = chosen["user_ID"]
                 end
                 
                 found = userToDatabaseHandler(con, neighbour_ID)
                 num_rows = found.count
                 if num_rows == 0
                     begin
                      neighbour = Twitter.user(neighbour_ID)
                     rescue Twitter::Error::TooManyRequests
                          puts "TooManyRequests sleeping"
                          sleep(900)
                          retry
                     end
                     connection_count = neighbour["followers_count"] + neighbour["friends_count"] 
                 else
                      query = "select following_count, followed_by_count from users where user_ID = " + neighbour_ID.to_s + ";"
                      count = con.query(query)
                      connection_count = 0
                      count.each do |counter|
                        connection_count = counter["following_count"] + counter["followed_by_count"] 
                      end
                 end
                 
             rescue
                  puts "unauthorized twitter user, retrying get NEW NEIGHBOUR"
                  retry
             end
            
             ratio = current_num_all/connection_count
             
             p = rand()
             if p <= ratio || kick_counter > 2*current_num_all
               #current id update to neighbour_ID
               current_id = neighbour_ID
               new_current_id_flag = true
             else
               #current id stays the same
             end
             kick_counter = kick_counter+1
         end  #ends while current user flag not updated
         
  end #ends while current_id != nil
  puts "DONE"
end

def getNeighbour(query_result)
    #what if they don't have followers
     random = rand(query_result.count)
     chosen = nil
     counter = 0
     query_result.each do |connection|
       if counter==random
          chosen = connection
          break
       else
         counter=counter+1
       end 
     end
     
     chosen
end

def getUser
 #
  #
  #
  #
  #
  #
  #
  #
  Twitter.configure do |config2|
          config2.consumer_key       = 'Tr7OSqwXVUAKgmgWe17sUQ'
          config2.consumer_secret    = 'tuY1yAYq2Ew7go12MNika6BC3uyrpC3LCpoVBZk'
          config2.oauth_token        = '1653234812-kuXpFwQz5U3i4tlbNWonEeL49HqHcFyh2Au4vCk'
          config2.oauth_token_secret = 'OFcZMVfu2d2EOcvnifjUwPvlWWRPYsDr5OA4eTM58'
     end
     
  #katie = Twitter.user("katie_bell_93")
  #p katie.inspect
  stephenfry = Twitter.user(51722563)
  p stephenfry.inspect
# p stephenfry["id"].inspect #15439395
  
  #current = Twitter.get('https://api.twitter.com/1.1/users/show.json?user_id=72109014')
 #p current.inspect
 
  
  #p katie["id"].inspect
   #p stephenfry["id"].inspect
end

def userToDatabaseHandler(con, user_id)
 
  #query if user is in database
  #if not
  # add to database
  # else continue to tweet collection (maybe need to update fact visiting again
  # Return true if user was already in database, and false otherwise (but they will have been added after this)
  #
  #
  #
  #
  query = "select * from users where user_id = " + user_id.to_s + ";" 
  found = con.query(query)
end

def tweetsHandler(con, current_id, count)
 

  #going to have to specify here the since_id and max_id to make sure not grabbing same tweets
  max_id_db = 0
  since_id_db = 0
  since_id_to_store = 0
  max_id_to_store = 0
  
  if count == 100 
      begin
          timeline = Twitter.user_timeline(current_id, :count => count) 
      rescue Twitter::Error::TooManyRequests
          puts "rescuing TooManyRequests sleeping"
          sleep(900)
          retry
      rescue
          getMHRWnextnode(con)              
      end  
  else  #revisiting user, grabbing less tweets
    #if user in table, need to get tweets with max_id and since_id from db
    ids = con.query("select max_id, since_id from users where user_ID =" + current_id.to_s + ";")
    ids.each do |row|
        max_id_db = row["max_id"]
        since_id_db = row["since_id"]
     end
     #need to check this person tweeted before, if not, check if they have now, else, use since and max_ids
     if since_id_db && max_id_db
       timeline = Twitter.user_timeline(current_id, :count => count) 
     else #use since and max ids
         begin
              timeline1 = Twitter.user_timeline(current_id, :count => count, :since_id => since_id_db)
              tweetcount = timeline1.count
              remainder = count - tweetcount
              timeline2 = Twitter.user_timeline(current_id, :count => remainder, :max_id => max_id_db)
            
             if tweetcount == 0 #if no new tweets, keep since id as was in db
                  since_id_to_store = since_id_db
             else #else set it a flagged value so it gets changed
                  since_id_to_store = 0
             end
             
             timeline = timeline1.concat(timeline2)
         rescue Twitter::Error::TooManyRequests
                puts "TooManyRequests sleeping"
                sleep(900)
                retry
         end#ends begins/rescue
         
     end#ends if/else for if since and max ids were 0
  end #ends if new user to db or seen before
              
    
     
    #iterate over tweets grabbed for storing
    timeline.each do |tweet|
           #might need a better way to do this, but need ID of first iteration only
           if since_id_to_store == 0
             since_id_to_store = tweet["id"]
           end
          
           #last tweet processed will be correct id for max_id.
           max_id_to_store = tweet["id"]
            
           #based on value of original, know whether to store in original or retweets
           #need to search if the original has already been put in the database
           
           #if this tweet is a retweet
           if tweet["retweeted_status"] 
                  
                #search to see if original has been stored, will break foreign key constraint if not
                found = con.query("select tweet_ID from original_tweets where tweet_ID = " + tweet["retweeted_status"]["id"].to_s + ";")
                num_rows = found.count
                
                if num_rows == 0 
                      tweetText = tweetCleaner(tweet["retweeted_status"]["text"])
                      #original_tweets: tweet_id, user_id, favourite_count, retweet_count
                      begin
                        query = "insert into original_tweets values(" + tweet["retweeted_status"]["id"].to_s + ", " + tweet["retweeted_status"]["user"]["id"].to_s + ", \"" + tweetText.to_s + "\", " + tweet["retweeted_status"]["favourite_count"].to_s + ", " + tweet["retweeted_status"]["retweet_count"].to_s + ");"
                        con.query(query)
                      rescue
                        puts "rescuing sql insert to original tweets"
                      end
                else #found original in database, might need to update values for retweet and favourite counts though
                      query = "update original_tweets set favourite_count = " + tweet["retweeted_status"]["favourite_count"].to_s + " where tweet_ID = " + tweet["retweeted_status"]["id"].to_s + ";"
                      con.query(query)
                      query =  "update original_tweets set retweet_count = " + tweet["retweeted_status"]["retweet_count"].to_s + " where tweet_ID = " + tweet["retweeted_status"]["id"].to_s + ";"   
                      con.query(query)         
                end
               
               #retweets: tweet_ID, retweeted_by_id, original_tweet_id, originally_tweeted_by_id 
                begin
                   query = "insert into retweets values(" + tweet["id"].to_s + ", " + current_id.to_s + ", " + tweet["retweeted_status"]["id"].to_s + ", " + tweet["retweeted_status"]["user"]["id"].to_s + ");"
                   con.query(query)
                rescue Mysql2::Error
                  puts "rescuing sql into retweets"
                end
                 
           else #if original tweet
               #need to add to original_tweets
               begin
                   tweetText = tweetCleaner(tweet["text"])
                   query = "insert into original_tweets values(" + tweet["id"].to_s + ", " + current_id.to_s + ", \"" + tweetText.to_s + "\", " + tweet["favourite_count"].to_s + ", " + tweet["retweet_count"].to_s + ");"
                   con.query(query)
               rescue Mysql2::Error
                  puts "rescuing mysql into original tweets"
               end
           end #ends if original   
     end #ends tweet do loop
 
  con.query("update users set since_id = " + since_id_to_store.to_s + " where user_ID = " + current_id.to_s + ";")
  con.query("update users set max_id = " + max_id_to_store.to_s + " where user_ID = " + current_id.to_s + ";")

end

def tweetCleaner(tweetText)
  
  tweetText = tweetText.gsub('\"', '\\"')
  tweetText1 = tweetText.gsub('\'', '\\\'')
end

def friendsAndFollowersHandler(con, current_id)
  
  
    next_cursor_followers = 0
    next_cursor_friends = 0
  
   cursors = con.query("select next_cursor_friends, next_cursor_followers from users where user_ID = " + current_id.to_s + ";")   
   cursors.each do |row|
       next_cursor_followers = row["next_cursor_followers"]
       next_cursor_friends = row["next_cursor_friends"]
       end
     
  #puts "friends"
   begin  
       if next_cursor_friends == "null"
         friends = Twitter.friend_ids(current_id, :count => 100)
       else
         friends = Twitter.friend_ids(current_id, :cursor => next_cursor_friends, :count => 100)
       end
   rescue Twitter::Error::TooManyRequests
        puts "TooManyRequests sleeping"
        sleep(900)
        retry
   end
   
   if friends != nil
      friends.ids.each do |id| 
         begin
             query = "insert  into following values(" + id.to_s + ", " + current_id.to_s + ");"
             con.query(query)
         rescue
             puts "rescuing adding friends problem"
         end
       end
       query = "update users set next_cursor_friends = " + friends.next_cursor.to_s + " where user_ID = " + current_id.to_s + ";"
       con.query(query)
   end
  
  #puts "followers:"
   begin 
       if next_cursor_followers == "null"
         followers = Twitter.follower_ids(current_id, :count => 100)
       else
         followers = Twitter.follower_ids(current_id, :cursor => next_cursor_followers, :count => 100)
       end
   rescue Twitter::Error::TooManyRequests
       puts "TooManyRequests"
       sleep(900)
       retry
   end
   
   if followers != nil
     followers.ids.each do |id| 
           begin
               query = "insert  into following values(" + current_id.to_s + ", " + id.to_s + ");"
               con.query(query)
           rescue
             puts "rescuing adding followers problem"
           end
       end
       query = "update users set next_cursor_followers = " + followers.next_cursor.to_s + " where user_ID = " + current_id.to_s + ";"
       con.query(query)
   end
end

def checkRateLimit
  #
  #
     remaining = Twitter.get('/1.1/application/rate_limit_status.json')[:body]
     jj remaining
end

def authenticate(con)
  #
  #
  Twitter.configure do |config3|
           config3.consumer_key       = 'Tr7OSqwXVUAKgmgWe17sUQ'
           config3.consumer_secret    = 'tuY1yAYq2Ew7go12MNika6BC3uyrpC3LCpoVBZk'
           config3.oauth_token        = '1653234812-kuXpFwQz5U3i4tlbNWonEeL49HqHcFyh2Au4vCk'
           config3.oauth_token_secret = 'OFcZMVfu2d2EOcvnifjUwPvlWWRPYsDr5OA4eTM58'
      end
  
  getMHRWnextnode(con)
  #checkRateLimit
  #getUser
  
end

connect_to_sql